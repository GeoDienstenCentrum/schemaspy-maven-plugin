name: Maven CI

on:
  push:
    branches: [ master ]
  pull_request:

env:
  MAVEN_OPTS: -Djava.awt.headless=true
  PGPASSWORD: postgres
  PGUSER: postgres
  PGDATABASE: postgres

jobs:
  build:
    name: Test Java  ${{ matrix.java }} / Maven ${{ matrix.maven }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:        
        java: [ 8, 11 ]
        java_dist: ["temurin"]
        maven: [ "3.5.4", "3.6.3", "3.8.8", "3.9.2" ]
        include:
          - java: 17
            java_dist: "temurin"
            maven: "3.9.2"

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 15s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ matrix.maven }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: ${{ matrix.java_dist }}
          cache: maven

      - name: Startup databases
        run: |
          build/ci/start-oracle.sh 21.3.0
          build/ci/start-mysql.sh 8
          build/ci/start-mssql.sh 2019-latest

      - name: Install extra software
        run: sudo apt install -y --no-install-recommends graphviz

      - name: Build with Maven
        run: mvn install -Dmaven.test.skip=true -B -V -fae -q

      - name: Setup databases
        run: |
          psql -U postgres -h localhost -c 'CREATE DATABASE test;'
          psql -U postgres -h localhost -d test -f ./src/test/resources/sql/pgsql.sql
          docker exec -i mysql1 mysql -uroot -pmysql -e 'CREATE DATABASE IF NOT EXISTS test;'
          docker exec -i mysql1 mysql -uroot -pmysql test < ./src/test/resources/sql/mysql.sql
          docker exec -i sql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Password12!' -d 'master' -Q 'CREATE DATABASE test'
          docker exec -i sql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Password12!' -d 'test' -i /checkout/src/test/resources/sql/mssql.sql
          docker exec -i schemaspy sqlplus -l system/oracle@//localhost:1521/XE < build/ci/create_oracle_user.sql
          docker exec -i schemaspy sqlplus -l schemaspy/schemaspy@//localhost:1521/XE < src/test/resources/sql/oracle.sql

      - name: Test
        run: |
          mvn -e -B -fae -Pmaven-ci clean test -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss,SSS -Dfailsafe.useFile=false
          mvn -e -B -fae -Pmaven-ci jacoco:report coveralls:report -q -Dlicense.skip=true -DrepoToken=$GITHUB_TOKEN -DserviceName=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      # https://github.com/marketplace/actions/coveralls-github-action
#      - name: Report test coverage
#        uses: coverallsapp/github-action@v1.1.2
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: Check Javadoc for Java 8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'zulu'
          cache: maven

      - name: JavaDoc
        run: mvn javadoc:javadoc

      - name: Test JavaDoc
        run: mvn javadoc:test-javadoc
